% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sales_optim.R
\name{sales_optim}
\alias{sales_optim}
\title{Compute MAPE for a Multiplicative Demand Model}
\usage{
sales_optim(x, price, com_price, year, monthofyear, adstock, sales)
}
\arguments{
\item{x}{A numeric vector of parameters (length 17). Expected order:
\enumerate{
  \item \code{const} (overall constant term)
  \item \code{trend_base} (trend exponent base)
  \item \code{adeffect} (scale factor for adstock effect)
  \item \code{competitor_elasticity} (competitive price elasticity)
  \item \code{elasticity} (own price elasticity)
  \item \code{s1} through \code{s12} (seasonality coefficients for months 1 to 12)
}}

\item{price}{A numeric vector of own prices.}

\item{com_price}{A numeric vector of competitor prices. If \code{NA}, the competitor
price effect defaults to 1 (neutral).}

\item{year}{A numeric vector indicating the time index for the trend component.}

\item{monthofyear}{An integer vector (1 through 12) used to apply monthly seasonality.}

\item{adstock}{A numeric vector representing the carryover effect from advertising
(e.g., output from \code{adstock}).}

\item{sales}{A numeric vector of actual observed sales to be compared against
the model prediction.}
}
\value{
A single numeric value indicating the mean absolute percentage error (MAPE)
  between the model's predicted sales and the actual \code{sales}.
}
\description{
The \code{sales_optim()} function calculates predicted sales using
a multiplicative marketing mix model that includes baseline, trend, adstock
carryover, competitor pricing, own price elasticity, and seasonality factors.
It returns the mean absolute percentage error (MAPE) of the model's predictions.
}
\details{
The function implements a multiplicative model:
\deqn{
  \hat{Y} = \mathrm{const} \times \bigl(\mathrm{trend\_base}^{(\mathrm{year})} + \mathrm{adeffect} \times \mathrm{adstock}\bigr)
           \times \bigl(\mathrm{price}/\mathrm{com\_price}\bigr)^{-\mathrm{competitor\_elasticity}}
           \times \mathrm{price}^{-\mathrm{elasticity}}
           \times \mathrm{seasonal\_index}.
}
}
\examples{
\dontrun{
param_guess <- rep(1, 17)
error_value <- sales_optim(
  x = param_guess,
  price = df$price,
  com_price = df$com_price,
  year = df$trend,
  monthofyear = df$month,
  adstock = df$Adstock,
  sales = df$weekly_sales
)
}

}

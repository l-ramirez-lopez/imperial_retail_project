% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimise_by_sku.R
\name{optimise_by_sku}
\alias{optimise_by_sku}
\title{Parameter Optimization by SKU}
\usage{
optimise_by_sku(df)
}
\arguments{
\item{df}{A data frame containing at least:
\describe{
  \item{\code{sku}}{An identifier for each SKU.}
  \item{\code{price}}{Observed product price.}
  \item{\code{com_price}}{Competitor price.}
  \item{\code{month}}{Month of the year (1--12).}
  \item{\code{trend}}{Time index for the trend component.}
  \item{\code{Adstock}}{Advertising carryover effect (from \code{\link{adstock}}).}
  \item{\code{weekly_sales}}{Actual observed sales.}
}}
}
\value{
A data frame with one row per SKU, containing:
  \itemize{
    \item \code{sku}: The SKU identifier.
    \item \code{competitor_elasticity}: Best-fit competitor price elasticity.
    \item \code{elasticity}: Best-fit own price elasticity.
    \item \code{mape}: The minimized mean absolute percentage error.
  }
}
\description{
The \code{optimise_by_sku()} function loops through each SKU in a data frame,
sets initial guesses and bounds for parameters, then applies a constrained
optimization (\code{optim()}) that minimizes the mean absolute percentage error
(MAPE) from \code{\link{sales_optim}}. It returns a data frame of best-fitting
parameter values and MAPE for each SKU.
}
\details{
The function initializes a table of parameter guesses and bounds, then for each SKU:
\enumerate{
  \item Updates the constant term using the SKU's mean weekly sales.
  \item Calls \code{optim(..., fn = sales_optim)} with L-BFGS-B bounds.
  \item Extracts and stores best-fit parameters and MAPE.
}
}
\examples{
\dontrun{
# Suppose df_w_competitor is a data frame with the required columns
results <- optimise_by_sku(df_w_competitor)
head(results)
}

}
